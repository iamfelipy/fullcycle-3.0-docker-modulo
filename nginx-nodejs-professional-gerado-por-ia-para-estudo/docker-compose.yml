version: '3.8'

services:
  nginx:
    build: ./nginx
    container_name: nginx-proxy
    ports:
      - "${NGINX_PORT:-80}:80"
    depends_on:
      app:
        condition: service_healthy
    networks:
      - app-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  app:
    build: 
      context: ./app
      target: ${NODE_ENV:-development}
    container_name: node-app
    environment:
      - NODE_ENV=${NODE_ENV:-development}
      - DB_HOST=${DB_HOST:-db}
      - DB_USER=${DB_USER:-root}
      - DB_PASSWORD=${DB_PASSWORD:-root}
      - DB_NAME=${DB_NAME:-nodedb}
      - DB_PORT=${DB_PORT:-3306}
    volumes:
      - ./app:/app
      - /app/node_modules
    networks:
      - app-network
    depends_on:
      db:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "node", "healthcheck.js"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    restart: unless-stopped

  db:
    image: mysql:8.0
    container_name: mysql-db
    environment:
      - MYSQL_ROOT_PASSWORD=${DB_PASSWORD:-root}
      - MYSQL_DATABASE=${DB_NAME:-nodedb}
      - MYSQL_USER=${DB_USER:-app}
      - MYSQL_PASSWORD=${DB_PASSWORD:-root}
    volumes:
      - mysql_data:/var/lib/mysql
      - ./db/init.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - app-network
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost", "-u", "root", "-p${DB_PASSWORD:-root}"]
      timeout: 20s
      retries: 10
      start_period: 30s
    restart: unless-stopped

networks:
  app-network:
    driver: bridge

volumes:
  mysql_data:
    driver: local
